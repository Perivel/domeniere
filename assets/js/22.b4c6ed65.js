(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{383:function(t,e,s){"use strict";s.r(e);var a=s(45),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"modules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[t._v("#")]),t._v(" Modules")]),t._v(" "),s("p",[t._v("Modules are containers for objects in your domain. Modules contain a collection of highly cohesive objects objects that serve a common purpose.")]),t._v(" "),s("h2",{attrs:{id:"defining-modules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#defining-modules"}},[t._v("#")]),t._v(" Defining Modules")]),t._v(" "),s("p",[t._v("To define a module, we can run the following command in our root directory.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("domeniere create module <module name>\n")])])]),s("p",[t._v("This will create a new module subdirectory in your project's "),s("code",[t._v("src")]),t._v(" directory.")]),t._v(" "),s("p",[t._v("Below is an example of a "),s("code",[t._v("Users")]),t._v(" module class.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Module "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@domeniere/module'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserModule")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Here, we are defining a Users module, by passing in the name of the module in the constructor. Module names can be any combination of alphabetical character, numbers, dashes (-), and underscores (_). The only requirement is that each module name must be unique. The module name is what will be used to refer to objects within that module during Dependency Injection.")]),t._v(" "),s("h2",{attrs:{id:"adding-bindings-to-the-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adding-bindings-to-the-module"}},[t._v("#")]),t._v(" Adding Bindings to the Module")]),t._v(" "),s("p",[t._v("Once we have created our module, we can add bindings to it. That is, we can register objects that will be available to our domain. We can add Factories, Services, and Repositories to our modules. We add these things to our module through what is called a binding. A binding is a a link between our classes and something else. There are two types of bindings we can create. A "),s("code",[t._v("Factory Binding")]),t._v(" binds our classes to a factory function, which tells our module how to instanciate that class. An "),s("code",[t._v("Instance Binding")]),t._v(" establishes a link between our class and a specific instnace of our class, which is either pre-defined or defined during runtime.")]),t._v(" "),s("p",[t._v("We create bindings in our module's "),s("code",[t._v("createBindings()")]),t._v(" method.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserModule")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Module")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"users"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createBindings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code goes here.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("In our "),s("code",[t._v("createBindings()")]),t._v(", we have four options for defining our bindings: "),s("code",[t._v("bindFactory()")]),t._v(", "),s("code",[t._v("bindRepository()")]),t._v(", "),s("code",[t._v("bindService()")]),t._v(", and "),s("code",[t._v("bindServiceInstance()")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"bindfactory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bindfactory"}},[t._v("#")]),t._v(" bindFactory()")]),t._v(" "),s("p",[t._v("We can use the "),s("code",[t._v("bindFactory()")]),t._v(" method to create a binding for our factory. The "),s("code",[t._v("bindFactory()")]),t._v(" method takes two arguments: the name of the class we want to bind, and a factory function which tells our module how to instanciate that class.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bindFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UserFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Notice here we are adding a UserFactory binding to our module. In our factory function, we tell our module how to instanciate an instance of UserFactory.")]),t._v(" "),s("h3",{attrs:{id:"bindrepository"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bindrepository"}},[t._v("#")]),t._v(" bindRepository()")]),t._v(" "),s("p",[t._v("We can add a repsitory to our module with the "),s("code",[t._v("bindRepository()")]),t._v(" method. The "),s("code",[t._v("bindRepository()")]),t._v(" method takes the repository class name as its single parameter. As discussed in the Repository section, we leave the implementation of the repository to the user of our Domeniere appliation. Here, we are simply telling our module to expect an instnace of our repository class to be registered at a later time.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bindRepository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UserRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Here, we simply pass in the name of the repository. This tells our module that it should expect to receive an instance of UserRepository at a later time.")]),t._v(" "),s("h3",{attrs:{id:"bindservice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bindservice"}},[t._v("#")]),t._v(" bindService()")]),t._v(" "),s("p",[t._v("We can use the "),s("code",[t._v("bindService()")]),t._v(" method to bind our module to a service class. "),s("code",[t._v("bindService()")]),t._v(" takes two arguments: The name of the service class to bind and a factory function to tell the module how to instanciate that service.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bindService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CreateUserCommand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CreateUserCommand")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UserFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UserRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Notice here we create a service binding in much the same way we did a factory binding. However, you may have noticed there is a slight difference in that we refer to the module to instanciate any other dependencies our service may need. In our case, our CreateUserCommand requires a UserFacory and a UserRepository.")]),t._v(" "),s("h3",{attrs:{id:"bindserviceinstance"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bindserviceinstance"}},[t._v("#")]),t._v(" bindServiceInstance()")]),t._v(" "),s("p",[t._v("Like "),s("code",[t._v("bindRepository()")]),t._v(", "),s("code",[t._v("bindServiceInstance()")]),t._v(" tells our module to expect an instance of our service to be passed in at a later time.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bindServiceInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GetCoordinatesForAdressQuery"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Notice here that we are registering a GetCoordinatesForAddressQuery service in much the same way as we did with binding a repository.")]),t._v(" "),s("h2",{attrs:{id:"binding-instances-to-module-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#binding-instances-to-module-objects"}},[t._v("#")]),t._v(" Binding Instances to module Objects")]),t._v(" "),s("p",[t._v("As covered in the last section, we used "),s("code",[t._v("bindRepository()")]),t._v(" and "),s("code",[t._v("bindServiceInstance()")]),t._v(" to twll our module to expect an instance to be registered at a later time. When that time comes, we can use the "),s("code",[t._v("registerRepositoryInstance()")]),t._v(" method to register a repository instance to our module, and the "),s("code",[t._v("registerServiceInstance()")]),t._v(" method to register a service instance.")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerRepositoryInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("UserRepository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MongoUserRepository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerServiceInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GeocodeService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeGetCoordinatesForAddressQuery")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Here, we use the "),s("code",[t._v("registerRepositoryInstance()")]),t._v(" to register a repository instance to the module that we defined earlier. And, we use the "),s("code",[t._v("registerSeviceInstance()")]),t._v(" method to register an instance of a service.")])])}),[],!1,null,null,null);e.default=n.exports}}]);
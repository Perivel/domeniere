import moment from "moment";
import 'moment-timezone';
export class Timestamp {
    constructor(year, month, date, hours = 0, minutes = 0, seconds = 0, ms = 0) {
        this.date = new Date(year, month, date, hours, minutes, seconds, ms);
    }
    static FromDate(date) {
        return new Timestamp(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
    }
    static Now() {
        return Timestamp.FromDate(new Date(Date.UTC(0, 0, 0, 0, 0, 0, 0)));
    }
    addDays(numDays) {
        return Timestamp.FromDate(this.toMomentObject().add(numDays, 'days').toDate());
    }
    addHours(numHours) {
        return Timestamp.FromDate(this.toMomentObject().add(numHours, 'hours').toDate());
    }
    addMinutes(numMinutes) {
        return Timestamp.FromDate(this.toMomentObject().add(numMinutes, 'minutes').toDate());
    }
    addMonths(numMonths) {
        return Timestamp.FromDate(this.toMomentObject().add(numMonths, 'months').toDate());
    }
    addYears(numYears) {
        return Timestamp.FromDate(this.toMomentObject().add(numYears, 'years').toDate());
    }
    day() {
        return Number(this.toMomentObject().format("D"));
    }
    isAfter(suspect) {
        let isAfter = false;
        if (suspect instanceof Timestamp) {
            const other = suspect;
            isAfter = this.toMomentObject().isAfter(other.toMomentObject());
        }
        return isAfter;
    }
    isBefore(suspect) {
        let isBefore = false;
        if (suspect instanceof Timestamp) {
            const otherCreated = suspect;
            isBefore = this.toMomentObject().isBefore(otherCreated.toMomentObject());
        }
        return isBefore;
    }
    equals(suspect) {
        let isEqual = false;
        if (suspect instanceof Timestamp) {
            const other = suspect;
            isEqual = this.toMomentObject().isSame(other.toMomentObject());
        }
        return isEqual;
    }
    month() {
        return Number(this.toMomentObject().month());
    }
    subtractDays(numDays) {
        return Timestamp.FromDate(this.toMomentObject().subtract(numDays, 'days').toDate());
    }
    subtractHours(numHours) {
        return Timestamp.FromDate(this.toMomentObject().subtract(numHours, 'h').toDate());
    }
    subtractMinutes(numMinutes) {
        return Timestamp.FromDate(this.toMomentObject().subtract(numMinutes, 'm').toDate());
    }
    subtractMonths(numMonths) {
        return Timestamp.FromDate(this.toMomentObject().subtract(numMonths, 'months').toDate());
    }
    subtractYears(numYears) {
        return Timestamp.FromDate(this.toMomentObject().subtract(numYears, 'y').toDate());
    }
    utcString() {
        return this.toMomentObject().format();
    }
    value() {
        return new Date(this.utcString());
    }
    year() {
        return Number(this.toMomentObject().format("YYYY"));
    }
    toMomentObject() {
        return moment.utc(this.date);
    }
}

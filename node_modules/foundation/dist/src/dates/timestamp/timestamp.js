import moment from "moment";
import 'moment-timezone';
import { DateException } from './../exceptions/date.exception';
export class Timestamp {
    constructor(value) {
        if (!value) {
            throw new DateException();
        }
        const utcDate = new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds()));
        this.date = this.toMomentObject(utcDate).toDate();
    }
    static Now() {
        return new Timestamp(new Date());
    }
    addDays(numDays) {
        return new Timestamp(this.toMomentObject(this.date).add(numDays, 'days').toDate());
    }
    addHours(numHours) {
        return new Timestamp(this.toMomentObject(this.date).add(numHours, 'hours').toDate());
    }
    addMinutes(numMinutes) {
        return new Timestamp(this.toMomentObject(this.date).add(numMinutes, 'minutes').toDate());
    }
    addMonths(numMonths) {
        return new Timestamp(this.toMomentObject(this.date).add(numMonths, 'months').toDate());
    }
    addYears(numYears) {
        return new Timestamp(this.toMomentObject(this.date).add(numYears, 'years').toDate());
    }
    day() {
        return Number(this.toMomentObject(this.date).format("D"));
    }
    isAfter(suspect) {
        let isAfter = false;
        if (suspect instanceof Timestamp) {
            const other = suspect;
            isAfter = this.toMomentObject(this.date).isAfter(other.toMomentObject(other.date));
        }
        return isAfter;
    }
    isBefore(suspect) {
        let isBefore = false;
        if (suspect instanceof Timestamp) {
            const otherCreated = suspect;
            isBefore = this.toMomentObject(this.date).isBefore(otherCreated.toMomentObject(otherCreated.date));
        }
        return isBefore;
    }
    equals(suspect) {
        let isEqual = false;
        if (suspect instanceof Timestamp) {
            const other = suspect;
            isEqual = this.toMomentObject(this.date).isSame(other.toMomentObject(other.date));
        }
        return isEqual;
    }
    month() {
        return Number(this.toMomentObject(this.date).month());
    }
    subtractDays(numDays) {
        return new Timestamp(this.toMomentObject(this.date).subtract(numDays, 'days').toDate());
    }
    subtractHours(numHours) {
        return new Timestamp(this.toMomentObject(this.date).subtract(numHours, 'h').toDate());
    }
    subtractMinutes(numMinutes) {
        return new Timestamp(this.toMomentObject(this.date).subtract(numMinutes, 'm').toDate());
    }
    subtractMonths(numMonths) {
        return new Timestamp(this.toMomentObject(this.date).subtract(numMonths, 'months').toDate());
    }
    subtractYears(numYears) {
        return new Timestamp(this.toMomentObject(this.date).subtract(numYears, 'y').toDate());
    }
    utcString() {
        return this.toMomentObject(this.date).format();
    }
    value() {
        return new Date(this.utcString());
    }
    year() {
        return Number(this.toMomentObject(this.date).format("YYYY"));
    }
    toMomentObject(date) {
        return moment.utc(date);
    }
}

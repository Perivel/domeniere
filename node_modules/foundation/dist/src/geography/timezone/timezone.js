import moment from 'moment';
import "moment-timezone";
import { TimezoneException } from "./../exceptions/timezone.exception";
export class Timezone {
    constructor(id, abbreviation, offset) {
        this._id = id;
        this._abbreviation = abbreviation;
        this._offset = offset;
    }
    static FromId(id) {
        if (moment.tz.names().indexOf(id) === -1) {
            throw new TimezoneException();
        }
        const now = moment.tz(new Date(), id);
        return new Timezone(now.zoneName(), now.zoneAbbr(), now.utcOffset());
    }
    static UTC() {
        const nowUtc = moment.tz(new Date(), "UTC");
        return new Timezone(nowUtc.zoneName(), nowUtc.zoneAbbr(), nowUtc.utcOffset());
    }
    abbreviation() {
        return this._abbreviation;
    }
    equals(suspect) {
        let isEqual = false;
        if (suspect instanceof Timezone) {
            const other = suspect;
            isEqual = (this.id() === other.id() &&
                this.abbreviation() === other.abbreviation() &&
                this.utcOffset() === other.utcOffset());
        }
        return isEqual;
    }
    id() {
        return this._id;
    }
    utcOffset() {
        return this._offset;
    }
}

import { PriorityQueueNode } from "./priority-queue-node";
export class PriorityQueue {
    constructor() {
        this._values = new Array();
    }
    clear() {
        this._values = new Array();
    }
    dequeue() {
        let value = null;
        if (!this.isEmpty()) {
            value = this._values.shift().value();
        }
        return value;
    }
    enqueue(value, priority) {
        const node = new PriorityQueueNode(value, priority);
        const size = this.size();
        let contains = false;
        let i = 0;
        for (i = 0; i < size; i++) {
            if (this._values[i].priority() > node.priority()) {
                this._values.splice(i, 0, node);
                contains = true;
                break;
            }
        }
        if (!contains) {
            this._values.push(node);
        }
    }
    isEmpty() {
        return this.size() === 0;
    }
    peek() {
        let value = null;
        if (!this.isEmpty()) {
            value = this._values[0].value();
        }
        return value;
    }
    size() {
        return this._values.length;
    }
    toArray() {
        const arr = new Array();
        this._values.forEach(node => arr.push(node.value()));
        return arr;
    }
}

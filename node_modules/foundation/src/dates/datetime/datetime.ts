import moment, { Moment } from "moment";
import 'moment-timezone';
import { DateException } from './../exceptions/date.exception';
import { DateTimeInterface } from "./datetime.interface";
import { Equatable } from "./../../common/common.module";
import { Timezone } from "./../../geography/geography.module";
import { Timestamp } from './../timestamp/timestamp';

/**
 * DateTime
 * 
 * DateTime represents a specific date and time.
 */

export class DateTime implements DateTimeInterface, Equatable {
    private date: Date;
    private tz: Timezone;

    /**
     * Creates a DateTime object.
     * @param value Date
     */

    constructor(year: number, month: number, date: number, hours: number = 0, minutes: number = 0, seconds: number = 0, ms: number = 0, timezone: Timezone = Timezone.UTC()) {
        const utcDate = new Date(Date.UTC(year, month, date, hours, minutes, seconds, ms));
        this.date = moment.utc().toDate();
        this.tz = timezone;
    }

    /**
     * FromDate()
     * 
     * creates a Timestamp instance from a Date object.
     * @param date The date to create a timestamp from
     */
    public static FromDate(date: Date, timezone: Timezone): DateTime {
        return new DateTime(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds(), timezone);
    }

    /**
     * Now()
     * 
     * Creates a DateTime for the current UTC date and time.
     */

    public static Now(timezone: Timezone = Timezone.UTC()): DateTime {
        return DateTime.FromDate(new Date(), timezone);
    }

    /**
     * FromTimestamp()
     * 
     * FromTimestamp() creates a DateTime from a timestamp.
     * @param timestamp the timestamp to convert.
     * @param timezone The timezone to use. Defaults to UTC.
     */

    public static FromTimestamp(timestamp: Timestamp, timezone: Timezone = Timezone.UTC()): DateTime {
        return DateTime.FromDate(timestamp.value(), timezone);
    }

    /**
     * addDays()
     * 
     * addDays() adds numDays days to the current DateTime.
     * @param numDays The number of days to add.
     */

    public addDays(numDays: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().add(numDays, 'days').toDate(), this.timezone());
    }

    /**
     * addHours()
     * 
     * addHours() adds numHours hours to the DateTime.
     * @param numHours The number of hours to add.
     */

    public addHours(numHours: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().add(numHours, 'hours').toDate(), this.timezone());
    }

    /**
     * addMinutes()
     * 
     * addMinutes() adds numMinutes minutes to the current DateTime.
     * @param numMinutes The number of minutes to add to the timestamp.
     */

    public addMinutes(numMinutes: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().add(numMinutes, 'minutes').toDate(), this.timezone());
    }

    /**
     * addMonths()
     * 
     * addMonths() adds numMonths months to the current DateTime.
     * @param numMonths The number of months to add.
     */

    public addMonths(numMonths: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().add(numMonths, 'M').toDate(), this.timezone());
    }

    /**
     * addYears()
     * 
     * addYears() adds numYears years to the current DateTime.
     * @param numYears The number of years to add.
     */

    public addYears(numYears: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().add(numYears, 'y').toDate(), this.timezone());
    }

    /**
     * day()
     * 
     * day() gets the day of the month of the DateTime.
     * @returns a number between 1 and 31
     */

    public day(): number {
        const utc = this.getMomentDate();
        const tzConverted = utc.tz(this.timezone().id());
        return Number(tzConverted.format("D"));
    }

    /**
     * isAfter()
     * 
     * isAfter() compares the Created instance to the suspect, to determine if the suspect is after the instance.
     * @param suspect The suspect to be compared.
     */

    public isAfter(suspect: any): boolean {
        let isAfter = false;

        if (suspect instanceof DateTime) {
            const other = suspect as DateTime;
            isAfter = this.getMomentDate().isAfter(other.getMomentDate());
        }

        return isAfter;
    }

    /**
     * isBefore()
     * 
     * isBefore() compares the instance to the suspect, to determine if the instance is before the suspect.
     * @param suspect The suspect to be compared to.
     */

    public isBefore(suspect: any): boolean {
        let isBefore = false;

        if (suspect instanceof DateTime) {
            const otherCreated = suspect as DateTime;
            isBefore = this.getMomentDate().isBefore(otherCreated.getMomentDate());
        }

        return isBefore;
    }

    /**
     * equals()
     * 
     * equals() compares the Created instance to a suspect, to determine if they are equal.
     * @param suspect The Created object to be compared.
     */

    public equals(suspect: any): boolean {
        let isEqual = false;

        if (suspect instanceof DateTime) {
            const other = suspect as DateTime;
            isEqual = this.getMomentDate().isSame(other.getMomentDate()) && this.timezone().equals(other.timezone());
        }

        return isEqual;
    }

    /**
     * month()
     * 
     * month() gets the month part of the DateTime.
     * @returns A numeric value (Jan = 1, Dec = 12) representing the month of the year.
     */

    public month(): number {
        const utc = this.getMomentDate();
        const tzConverted = utc.tz(this.timezone().id());

        // Moment countss months from 0, meaning Jan = 0 ... Dec = 11. So, we add 1 to get the correct month.
        return Number(tzConverted.format("M"));
    }



    /**
     * subtractDays()
     * 
     * subtractDays() subtracts numDays days from the current DateTime.
     * @param numDays The number of days to subtract.
     */

    public subtractDays(numDays: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().subtract(numDays, 'd').toDate(), this.timezone());
    }

    /**
     * subtractHours()
     * 
     * subtractHours() subtracts numHours hours from the DateTime.
     * @param numHours The number of hours to add.
     */

    public subtractHours(numHours: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().subtract(numHours, 'h').toDate(), this.timezone());
    }

    /**
     * subtractMinutes()
     * 
     * subtractMinutes() subtracts numMinutes minutes from the current DateTime.
     * @param numMinutes The number of minutes to subtract from the timestamp.
     */

    public subtractMinutes(numMinutes: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().subtract(numMinutes, 'm').toDate(), this.timezone());
    }

    /**
     * subtractMonths()
     * 
     * subtractMonths() subtracts numMonths months from the current DateTime.
     * @param numMonths The number of months to subtract.
     */

    public subtractMonths(numMonths: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().subtract(numMonths, 'M').toDate(), this.timezone());
    }

    /**
     * subtractYears()
     * 
     * subtractYears() subtracts numYears years from the current DateTime.
     * @param numYears The number of years to subtract.
     */

    public subtractYears(numYears: number): DateTime {
        return DateTime.FromDate(this.getMomentDate().subtract(numYears, 'y').toDate(), this.timezone());
    }

    /**
     * timezone()
     * 
     * timezone() gets the timestamp timezone.
     */

    public timezone(): Timezone {
        return this.tz;
    }

    /**
     * toUtc()
     * 
     * toUtc() converts the timestamp to UTC time.
     */

    public toUtc(): DateTime {
        return DateTime.FromDate(this.value(), Timezone.UTC());
    }

    /**
     * toTimeaone()
     * 
     * toTimezone() converts the timestamp to the specified timezone.
     * @param timezone The timezone to convert to.
     */

    public toTimezone(timezone: Timezone): DateTime {
        return DateTime.FromDate(this.value(), timezone);
    }

    /**
     * utcString()
     * 
     * utcString() gets a UTC string for a DateTime.
     */

    public utcString(): string {
        return this.getMomentDate().format();
    }

    /**
     * value()
     * 
     * value() gets the value of the DateTime.
     */

    public value(): Date {
        const utc = this.getMomentDate();
        const tzConverted = utc.tz(this.timezone().id());
        return new Date(this.utcString());
    }

    /**
     * year()
     * 
     * year() gets the year portion of the DateTime.
     * 
     * @returns number
     */

    public year(): number {
        const utc = this.getMomentDate();
        const tzConverted = utc.tz(this.timezone().id());
        return Number(this.getMomentDate().format("YYYY"));
    }

    private getMomentDate(): Moment {
        return moment.utc(this.date);
    }
}
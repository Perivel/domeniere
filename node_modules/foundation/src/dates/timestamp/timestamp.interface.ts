
/**
 * TimestampInterface
 * 
 * TimestampInterface specifies the operations of a Timestamp.
 */

export interface TimestampInterface {


    /**
     * addDays()
     * 
     * addDays() adds numDays days to the current timestamp.
     * @param numDays The number of days to add.
     */

    addDays(numDays: number): TimestampInterface;

    /**
     * addHours()
     * 
     * addHours() adds numHours hours to the timestamp.
     * @param numHours The number of hours to add.
     */

    addHours(numHours: number): TimestampInterface;

    /**
     * addMinutes()
     * 
     * addMinutes() adds numMinutes minutes to the current timestamp.
     * @param numMinutes The number of minutes to add to the timestamp.
     */

    addMinutes(numMinutes: number): TimestampInterface;

    /**
     * addMonths()
     * 
     * addMonths() adds numMonths months to the current timestamp.
     * @param numMonths The number of months to add.
     */

    addMonths(numMonths: number): TimestampInterface;

    /**
     * addYears()
     * 
     * addYears() adds numYears years to the current timestamp.
     * @param numYears The number of years to add.
     */

    addYears(numYears: number): TimestampInterface;

    /**
     * day()
     * 
     * day() gets the day of the month of the DateOfBirth.
     * @returns a number between 1 and 31
     */

    day(): number;

    /**
     * isAfter()
     * 
     * isAfter() compares the Created instance to the suspect, to determine if the suspect is after the instance.
     * @param suspect The suspect to be compared.
     */

    isAfter(suspect: any): boolean;

    /**
     * isBefore()
     * 
     * isBefore() compares the instance to the suspect, to determine if the instance is before the suspect.
     * @param suspect The suspect to be compared to.
     */

    isBefore(suspect: any): boolean;

    /**
     * month()
     * 
     * month() gets the month part of the DateOfBirth.
     * @returns A numeric value (Jan = 1, Dec = 12) representing the month of the year.
     */

    month(): number;

    /**
     * subtractDays()
     * 
     * subtractDays() subtracts numDays days from the current timestamp.
     * @param numDays The number of days to subtract.
     */

    subtractDays(numDays: number): TimestampInterface;

    /**
     * subtractHours()
     * 
     * subtractHours() subtracts numHours hours from the timestamp.
     * @param numHours The number of hours to add.
     */

    subtractHours(numHours: number): TimestampInterface;

    /**
     * subtractMinutes()
     * 
     * subtractMinutes() subtracts numMinutes minutes from the current timestamp.
     * @param numMinutes The number of minutes to subtract from the timestamp.
     */

    subtractMinutes(numMinutes: number): TimestampInterface;

    /**
     * subtractMonths()
     * 
     * subtractMonths() subtracts numMonths months from the current timestamp.
     * @param numMonths The number of months to subtract.
     */

    subtractMonths(numMonths: number): TimestampInterface;

    /**
     * subtractYears()
     * 
     * subtractYears() subtracts numYears years from the current timestamp.
     * @param numYears The number of years to subtract.
     */

    subtractYears(numYears: number): TimestampInterface;


    /**
     * utcString()
     * 
     * utcString() gets a UTC string for a timestamp.
     */

    utcString(): string;

    /**
     * value()
     * 
     * value() gets the value of the timestamp.
     */

    value(): Date;

    /**
     * year()
     * 
     * year() gets the year portion of the date of birth.
     * 
     * @returns number
     */

    year(): number;
}
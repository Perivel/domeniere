
import moment, { Moment } from "moment";
import 'moment-timezone';
import { DateException } from './../exceptions/date.exception';
import { TimestampInterface } from "./timestamp.interface";
import { Equatable } from './../../common/common.module';


/**
 * Timestamp
 * 
 * Timestamp represents a moment in time in the form of a date and time.
 */

export class Timestamp implements TimestampInterface, Equatable {
    private date: Date;

    /**
     * Creates a Timestamp object.
     * @param value Date
     * @throws DateException when the date is invalid.
     */

    constructor(value: Date) {

        if (!value) {
            // invalid argument
            throw new DateException();
        }
        const utcDate = new Date(Date.UTC(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds()));
        this.date = this.toMomentObject(utcDate).toDate();
    }

    /**
     * Now()
     * 
     * Creates a Timestamp for the current moment in UTC format.
     */

    public static Now(): Timestamp {
        return new Timestamp(new Date());
    }

    /**
     * addDays()
     * 
     * addDays() adds numDays days to the current timestamp.
     * @param numDays The number of days to add.
     */

    public addDays(numDays: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).add(numDays, 'days').toDate());
    }

    /**
     * addHours()
     * 
     * addHours() adds numHours hours to the timestamp.
     * @param numHours The number of hours to add.
     */

    public addHours(numHours: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).add(numHours, 'hours').toDate());
    }

    /**
     * addMinutes()
     * 
     * addMinutes() adds numMinutes minutes to the current timestamp.
     * @param numMinutes The number of minutes to add to the timestamp.
     */

    public addMinutes(numMinutes: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).add(numMinutes, 'minutes').toDate());
    }

    /**
     * addMonths()
     * 
     * addMonths() adds numMonths months to the current timestamp.
     * @param numMonths The number of months to add.
     */

    public addMonths(numMonths: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).add(numMonths, 'months').toDate());
    }

    /**
     * addYears()
     * 
     * addYears() adds numYears years to the current timestamp.
     * @param numYears The number of years to add.
     */

    public addYears(numYears: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).add(numYears, 'years').toDate());
    }

    /**
     * day()
     * 
     * day() gets the day of the month of the DateOfBirth.
     * @returns a number between 1 and 31
     */

    public day(): number {
        return Number(this.toMomentObject(this.date).format("D"));
    }

    /**
     * isAfter()
     * 
     * isAfter() compares the Created instance to the suspect, to determine if the suspect is after the instance.
     * @param suspect The suspect to be compared.
     */

    public isAfter(suspect: any): boolean {
        let isAfter = false;

        if (suspect instanceof Timestamp) {
            const other = suspect as Timestamp;
            isAfter = this.toMomentObject(this.date).isAfter(other.toMomentObject(other.date));
        }

        return isAfter;
    }

    /**
     * isBefore()
     * 
     * isBefore() compares the instance to the suspect, to determine if the instance is before the suspect.
     * @param suspect The suspect to be compared to.
     */

    public isBefore(suspect: any): boolean {
        let isBefore = false;

        if (suspect instanceof Timestamp) {
            const otherCreated = suspect as Timestamp;
            isBefore = this.toMomentObject(this.date).isBefore(otherCreated.toMomentObject(otherCreated.date));
        }

        return isBefore;
    }

    /**
     * equals()
     * 
     * equals() compares the Created instance to a suspect, to determine if they are equal.
     * @param suspect The Created object to be compared.
     */

    public equals(suspect: any): boolean {
        let isEqual = false;

        if (suspect instanceof Timestamp) {
            const other = suspect as Timestamp;
            isEqual = this.toMomentObject(this.date).isSame(other.toMomentObject(other.date));
        }

        return isEqual;
    }

    /**
     * month()
     * 
     * month() gets the month part of the DateTime.
     * @returns A numeric value (Jan = 1, Dec = 12) representing the month of the year.
     */

    public month(): number {
        // Monent counts months from 0, meaning Jan = 0 ... Dec = 11. So, we add 1 to get the correct month.
        return Number(this.toMomentObject(this.date).month());
    }



    /**
     * subtractDays()
     * 
     * subtractDays() subtracts numDays days from the current timestamp.
     * @param numDays The number of days to subtract.
     */

    public subtractDays(numDays: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).subtract(numDays, 'days').toDate());
    }

    /**
     * subtractHours()
     * 
     * subtractHours() subtracts numHours hours from the timestamp.
     * @param numHours The number of hours to add.
     */

    public subtractHours(numHours: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).subtract(numHours, 'h').toDate());
    }

    /**
     * subtractMinutes()
     * 
     * subtractMinutes() subtracts numMinutes minutes from the current timestamp.
     * @param numMinutes The number of minutes to subtract from the timestamp.
     */

    public subtractMinutes(numMinutes: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).subtract(numMinutes, 'm').toDate());
    }

    /**
     * subtractMonths()
     * 
     * subtractMonths() subtracts numMonths months from the current timestamp.
     * @param numMonths The number of months to subtract.
     */

    public subtractMonths(numMonths: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).subtract(numMonths, 'months').toDate());
    }

    /**
     * subtractYears()
     * 
     * subtractYears() subtracts numYears years from the current timestamp.
     * @param numYears The number of years to subtract.
     */

    public subtractYears(numYears: number): Timestamp {
        return new Timestamp(this.toMomentObject(this.date).subtract(numYears, 'y').toDate());
    }

    /**
     * utcString()
     * 
     * utcString() gets a UTC string for a timestamp.
     */

    public utcString(): string {
        return this.toMomentObject(this.date).format();
    }

    /**
     * value()
     * 
     * value() gets the value of the timestamp.
     */

    public value(): Date {
        return new Date(this.utcString()); 
    }

    /**
     * year()
     * 
     * year() gets the year portion of the date of birth.
     * 
     * @returns number
     */

    public year(): number {
        return Number(this.toMomentObject(this.date).format("YYYY"));
    }

    /**
     * converts a date to a Moment object.
     * @param date The date to convert.
     */

    private toMomentObject(date: Date): Moment {
        return moment.utc(date);
    }
}
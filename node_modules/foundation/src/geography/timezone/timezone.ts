import { TimezoneInterface } from "./timezone.interface";
import { Equatable } from "./../../common/common.module";
import moment, { Moment } from 'moment';
import "moment-timezone";
import { TimezoneException } from "./../exceptions/timezone.exception";


export class Timezone implements TimezoneInterface, Equatable {
    private readonly _id: string;
    private readonly _offset: number;
    private readonly _abbreviation: string;

    constructor(
        id: string,
        abbreviation: string,
        offset: number
    ) {
        this._id = id;
        this._abbreviation = abbreviation;
        this._offset = offset;
    }

    /**
     * FromId()
     * 
     * FromeId() creates a Timezone from an Id.
     * @param id The Id of the timezone.
     */

    public static FromId(id: string): Timezone {
        if (moment.tz.names().indexOf(id) === -1) {
            // invalid timezone.
            throw new TimezoneException();
        }

        // timezone exists.
        const now = moment.tz(new Date(), id);
        return new Timezone(now.zoneName(), now.zoneAbbr(), now.utcOffset());
    }

    /**
     * UTC()
     * 
     * UTC() sets the timezone to UTC.
     */

    public static UTC(): Timezone {
        const nowUtc = moment.tz(new Date(), "UTC");
        return new Timezone(nowUtc.zoneName(), nowUtc.zoneAbbr(), nowUtc.utcOffset());
    }

    /**
     * abbreviation()
     * 
     * abbreviation() gets the timezone abbreviation()
     */

    public abbreviation(): string {
        return this._abbreviation;
    }


    /**
     * equals()
     * ‚àè
     * equals() compares the instnace to the suspect to determine if they are equal.
     * @param suspect the suspect to be compared.
     */

    public equals(suspect: any): boolean {

        let isEqual = false;

        if (suspect instanceof Timezone) {
            const other = suspect as Timezone;
            isEqual = (
                this.id() === other.id() &&
                this.abbreviation() === other.abbreviation() &&
                this.utcOffset() === other.utcOffset()
            );
        }

        return isEqual;
    }

    /**
     * id()
     * 
     * id() gets the Olson timezone id.
     */

    public id(): string {
        return this._id;
    }

    /**
     * utcOffset()
     * 
     * utcOffset() gets the UTC offset of the timezone.
     */

    public utcOffset(): number {
        return this._offset;
    }
}
import { Id } from "./../id/id";
import { v4 } from 'uuid'; 
import { UUIDInterface } from "./uuid.interface";


/**
 * UUID
 * 
 * UUID represents a UUID.
 */


export class UUID extends Id implements UUIDInterface{

    /**
     * Creates a UUID instance.
     * @param value The value of the UUID.
     * @throws InvalidArgumentException if value is empty.
     */
    constructor(value: string) {
        super(value);
    }

    /**
     * V4()
     * 
     * V4() generates a V4 UUID.
     */

    public static V4(): UUID {
        return new UUID(v4());
    }

    /**
     * equals()
     * 
     * equals() compares the suspect to the instance, to determine if they are equal.
     * @param suspect The suspect to be compared.
     */

    public equals(suspect: any): boolean {
        let isEqual = false;

        if (suspect instanceof UUID) {
            const other = suspect as UUID;
            isEqual = this.id() === other.id();
        }

        return isEqual;
    }
    
    /**
     * id()
     * 
     * id() gets the value of the id.
     */

    public id(): string {
        return super.id() as string;
    }
}
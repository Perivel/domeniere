import { DateTime } from './../../src/dates/dates.module';

test("Create a timestamp from an existing date.", () => {
    const localDate = new Date();
    const utcDate = new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), localDate.getHours(), localDate.getMinutes(), localDate.getSeconds(), localDate.getMilliseconds()));
    const dt = new DateTime(utcDate);
    expect(dt).toBeDefined();
    expect(dt.value()).toEqual(utcDate);
});

test('Generate a timestamp.', () => {
    const dt = DateTime.Now();
    expect(dt).toBeDefined();
});

test('Adding and subtracting days', () => {
    const initialDate = new Date(Date.UTC(2020, 6, 10, 5, 30, 0, 0));
    const dt = new DateTime(initialDate);

    // add one day.
    const addedDate = new Date(Date.UTC(2020, 6, 11, 5, 30, 0, 0));
    const addedDatesDt = dt.addDays(1);
    expect(addedDatesDt.value()).toEqual(addedDate);

    // subtract one day.
    const subtractedDaysDt = addedDatesDt.subtractDays(1);
    expect(subtractedDaysDt.value()).toEqual(initialDate);

    // add a full month
    const newDate = new Date(Date.UTC(2020, 7, 10, 5, 30, 0, 0));
    const newMonthDt = dt.addDays(30);
    expect(newMonthDt.value()).toEqual(newDate);

    // subtract an entire month.
    const subtractMonthDt = newMonthDt.subtractDays(30);
    expect(subtractMonthDt.value()).toEqual(initialDate);
});

test("Get the components of the timestamp.", () => {
    const date = new Date(Date.UTC(2020, 6, 10, 5, 30, 0, 0));
    const dt = new DateTime(date);
    expect(dt.month()).toEqual(6);
    expect(dt.day()).toEqual(10);
    expect(dt.year()).toEqual(2020);
});

test("Adding and subtracting months", () => {
    const initialDate = new Date(Date.UTC(2020, 6, 10, 5, 30, 0, 0));
    const datetime = new DateTime(initialDate);
    const futureDate = new Date(Date.UTC(2020, 9, 10, 5, 30, 0, 0));
    expect(datetime.addMonths(3).value()).toEqual(futureDate);

    const pastDate = new Date(Date.UTC(2020, 3, 10, 5, 30, 0, 0));
    expect(datetime.subtractMonths(3).value()).toEqual(pastDate);
});

test("Add and subtract years.", () => {
    const date = new Date(Date.UTC(2020, 6, 10, 5, 30, 0, 0));
    const dt = new DateTime(date);
    expect(dt.year()).toEqual(2020);
    expect(dt.addYears(1).year()).toEqual(2021);
    expect(dt.subtractYears(1).year()).toEqual(2019);
});